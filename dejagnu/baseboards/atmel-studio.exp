# Copyright (C) 2007-2012 George-Johann Lay
# Copyright (C) 2013-2014 Embecosm Limited.

# Contributor Georg-Johann Lay <avr@gjlay.de>
# Contributor Jeremy Bennett <jeremy.bennett@embecosm.com>

# This file is a generic board specification for Atmel Studio models.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

# Board description for Atmel Studio cycle accurate models. Based on an
# original for the ATmega128 and avrtest by Georg-Johann Lay.

# This is a list of toolchains that are supported on this board.
set_board_info target_install  {$target_triplet}

# routines needed to communicate with the board via GDB.
load_generic_config "gdb_stub"

# We need some extra and modified procs for testing through GDB. These
# supplement or override the standard procs. In particular the result of
# waiting depends on the argument passed to exit, not just that exit was
# called and gdb needs to load files into the remote target
search_and_load_file "library file" "gdb-stub-extra.exp" ${boards_dir}
search_and_load_file "library file" "gdb-extra.exp" ${boards_dir}

# No default multilib options are needed for this board.
process_multilib_options ""

# Lots of things we don't support
set_board_info no_long_long 1

# It isn't visible in the target triplet, so we set it explicitly.
set_board_info obj_format "elf"

# The compiler used to build for this board. This has *nothing* to do
# with what compiler is tested if we're testing gcc.
#set_board_info compiler  "[find_gcc]"
set_board_info compiler avr-gcc
# The compiler we are testing
set GCC_UNDER_TEST avr-gcc

# Alternatively, test the installed compilers
# set_board_info compiler    "<installdir>/bin/avr-gcc"
# set_board_info c++compiler "<installdir>/bin/avr-g++"

# We only support AVR LibC on this target
#
# some of the IEEE test in the gcc test suite evaluate the define symbol
# SIGNAL_SUPPRESS in order to find out whether to use signal.h when
# checking compliance of IEEE floating point.
# we do not have signal.h and, thus, define this symbol.

# This generic board requires the user to set up environment variables for the
# various parameters. AVR_MCU for the MCU, AVR_HEAP_END for the heap end. We
# do not set the BSS - the linker script should get that right. We also allow
# a generic extra for each.
set_board_info cflags  "-DSIGNAL_SUPPRESS -DNO_UNISTD_H -mmcu=$env(AVR_MCU) $env(AVR_CFLAGS_EXTRA)"
set_board_info ldflags "-Wl,--defsym=__heap_end=$env(AVR_HEAP_END) $env(AVR_LDFLAGS_EXTRA)"

# Allow a linker script to be set, although usually the default linker script
# is fine.
set_board_info ldscript "$env(AVR_LDSCRIPT)"

# We don't need a status wrapper, we extract the result by looking at
# registers when we have breakpointed _exit, exit and abort.
set_board_info needs_status_wrapper 0

# Configure specially for testing via GDB
set_board_info gdb_init_command "monitor reset"
set_board_info gdb_run_command "continue"
set_board_info gdb_protocol  "remote"
set_board_info gdb,start_symbol "*0x0"
set_board_info gdb,remote_timeout "300"
set_board_info use_gdb_stub 1
set_board_info netport [exec [file dirname $env(DEJAGNU)]/get-ip.sh $env(AVR_PORT_FILE) --rotate]

# GCC tool specific settings. Stack should generally be half the available
# RAM, but the value is up to the caller. Although other boards set it, it is
# not clear that text_size has any effect.
set_board_info gcc,stack_size $env(AVR_STACK_SIZE)
set_board_info gcc,text_size $env(AVR_TEXT_SIZE)
set_board_info gcc,no_trampolines 1
set_board_info gcc,no_pch_tests 1
set_board_info gcc,keeps_null_pointer_checks 1

# Restrict GCC compatibility tests. And optimise these to reduce size. See
# gcc/testsuite/lib/compat.exp for details.
set COMPAT_SKIPS [list {VA} {COMPLEX_INT}]
set COMPAT_OPTIONS [list [list {-Os -mno-interrupts  -mcall-prologues} {-Os -mno-interrupts  -mcall-prologues}]]

# GDB tool specific settings
set_board_info gdb,nosignals 1
set_board_info gdb,noresults 1
set_board_info gdb,short_int 1
set_board_info gdb,no_trampolines 1
set_board_info gdb,noargs 1
set_board_info gdb,noinferiorio 1
set_board_info gdb,nofileio 1
# We can only run one program at a time. Actually we can't do "run" at all, so
# why even have this? Future proofing?
set_board_info gdb,do_reload_on_run 1
