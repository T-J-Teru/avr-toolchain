# Copyright (C) 2007-2012 George-Johann Lay
# Copyright (C) 2013 Embecosm Limited.

# Contributor Georg-Johann Lay <avr@gjlay.de>
# Contributor Jeremy Bennett <jeremy.bennett@embecosm.com>
# Contributor Pithumani S <Pitchumani.S@atmel.com>

# This file is a board specification for the AVR simulator

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.          

# Board description for the atmega1280 as simulated by avrtest. Based on an
# original by Pitchumani S of Atmel.

# This is a list of toolchains that are supported on this board.
set_board_info target_install  {avr-unknown-unknown}

# routines needed to communicate with the board.
load_generic_config "sim"

#unset_board_info slow_simulator

proc sim_load {dest prog args} {
    # check whether the file with the avr-executable exists.
    #if ![file exists $prog] then {
    #    perror "$prog does not exist."
    #    return [list "untested" ""]
    #}

    #  Disabling stdin will prevent some malfunction programs from
    #  "hanging" because user does not type something.
    set result [exec avrtest-xmega -m 2000000000 -no-stdin $prog]

    # The variable $result now contains the output of the run-atmega1280 script.
    # Let's now look for the strings EXIT, ABORTED or TIMEOUT in result.
    set exit_position [string last EXIT $result ]
    if {$exit_position != -1 } then {
	return [list "pass" ""]
    } 
    set abort_position [string last ABORTED $result ] 
    if {$abort_position != -1 } then {
	return [list "fail" ""]
    }
    return [list "untested" ""]
}

# No default multilib options are needed for this board.
process_multilib_options ""

set_board_info is_simulator 1

#set_board_info gdb,nosignals 1
#set_board_info gdb,noresults 1
#set_board_info gdb,start_symbol "*0x0"
#set_board_info gdb,short_int 1
#set_board_info gdb,no_trampolines 1
set_board_info no_long_long 1
#set_board_info gdb,noargs 1

# It isn't visible in the target triple, so we set it explicitly.  The
# *linked* format is currently mmo, but those cases where this matters we
# can deal with separately.
set_board_info obj_format "elf"

# The compiler used to build for this board. This has *nothing* to do
# with what compiler is tested if we're testing gcc.
set_board_info compiler  "[find_gcc]"

# We only support newlib on this target. We assume that all multilib
# options have been specified before we get here.
#
# some of the IEEE test in the gcc test suite evaluate the define symbol
# SIGNAL_SUPPRESS in order to find out whether to use signal.h when
# checking compliance of IEEE floating point.
# we do not have signal.h and, thus, define this symbol. 
set_board_info cflags  " -DSIGNAL_SUPPRESS -mmcu=atxmega128a3"
set_board_info gcc,stack_size 2048
set_board_info gcc,no_trampolines 1
set_board_info gcc,no_pch_tests 1
set_board_info gcc,keeps_null_pointer_checks 1

# Linking against exit-atxmega128a3.o is very much preferred over compiling
# against exit.c.
set_board_info ldflags "$env(AVRTEST_HOME)/exit-atxmega128a3.o -Wl,-u,vfprintf -lprintf_flt -Wl,--defsym=__heap_end=0x80ffff,--defsym=__stack=0x1fff -L$env(AVRTEST_HOME)"

# Restrict compatibility tests. And optimise to reduce size.
set COMPAT_SKIPS [list {VA} {COMPLEX_INT}]
set COMPAT_OPTIONS [list [list {-Os -mno-interrupts  -mcall-prologues} {-Os -mno-interrupts  -mcall-prologues}]]
# No linker script needed - the simulator is the main environment for this
# target.
set_board_info ldscript ""

# Return codes are supported by the simulator.
set_board_info needs_status_wrapper 0

# FIXME: Some gdb board variables are usually here.  I currently have no clue
# what to set them to, so I won't.
